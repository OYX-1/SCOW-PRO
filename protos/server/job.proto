/**
   * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
   * SCOW is licensed under Mulan PSL v2.
   * You can use this software according to the terms and conditions of the Mulan PSL v2.
   * You may obtain a copy of Mulan PSL v2 at:
   *          http://license.coscl.org.cn/MulanPSL2
   * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
   * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
   * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
   * See the Mulan PSL v2 for more details.
*/

syntax = "proto3";

package scow.server;

import "common/job.proto";
import "common/money.proto";
import "common/ended_job.proto";
import "google/protobuf/timestamp.proto";
import "google/type/date.proto";

message JobFilter {
  // if neither account_name and user_id is set, query the account from tenant
  string tenant_name = 1;
  optional string user_id = 2;
  optional string account_name = 3;
  optional google.protobuf.Timestamp job_end_time_start = 4;
  optional google.protobuf.Timestamp job_end_time_end = 5;
  optional uint64 job_id = 6;
  // if length === 0, get from all clusters
  repeated string clusters = 7;
  optional uint64 start_bi_job_index = 8;
}

message GetJobsRequest {
  JobFilter filter = 1;
  uint32 page = 2;
  // if undefined or 0, page_size is 10
  optional uint64 page_size = 3;
}

message GetJobsResponse {
  uint64 total_count = 1;
  repeated common.JobInfo jobs = 2;
  common.Money total_account_price = 3;
  common.Money total_tenant_price = 4;
}

message ChangeJobPriceRequest {
  JobFilter filter = 1;
  optional common.Money account_price = 2;
  optional common.Money tenant_price = 3;
  string reason = 4;
  string operator_id = 5;
  string ip_address = 6;
}

// NOT_FOUND: job is not found
message ChangeJobPriceResponse {
  uint64 count = 1;
}

message GetJobByBiJobIndexRequest {
  string bi_job_index = 1;
}

// NOT_FOUND: job is not found
message GetJobByBiJobIndexResponse {
  common.JobInfo info = 1;
}

message GetRunningJobsRequest {
  string cluster = 1;
  optional string user_id = 2;
  // if account_name is set, query the account_name
  // if account is not set and tenant is set, query the tenant
  optional string tenant_name = 3;
  optional string account_name = 4;
  repeated string job_id_list = 5;
}

message GetRunningJobsResponse {
  repeated common.RunningJob jobs = 1;
}

message ChangeJobTimeLimitRequest {
  string cluster = 1;
  string job_id = 2;
  int64 limit_minutes = 3;
}

// NOT_FOUND: cluster or job_id is not found.
message ChangeJobTimeLimitResponse {}

message QueryJobTimeLimitRequest {
  string cluster = 1;
  string job_id = 2;
}

message CancelJobRequest {
  string cluster = 1;
  string user_id = 2;
  uint32 job_id = 3;
}

message CancelJobResponse {}

message GetBillingItemsRequest {
  // if not specified, return default price items
  optional string tenant_name = 1;
  // if true, returns only active billing items
  // if false, includes history_items
  bool active_only = 2;
}

message JobBillingItem {
  string id = 1;
  string path = 2;
  optional string tenant_name = 3;
  common.Money price = 4;
  google.protobuf.Timestamp create_time = 5;
  string amount_strategy = 6;
}

message GetBillingItemsResponse {
  repeated JobBillingItem active_items = 1;
  repeated JobBillingItem history_items = 2;
}

// NOT_FOUND: cluster or job_id is not found.
message QueryJobTimeLimitResponse {
  uint64 limit = 1;
}

message AddBillingItemRequest {
  // if not set, add as platform default item
  optional string tenant_name = 1;
  string item_id = 2;
  common.Money price = 3;
  string amount_strategy = 4;
  string path = 5;
  optional string description = 6;
}

message AddBillingItemResponse {}

message GetMissingDefaultPriceItemsRequest {}

message GetMissingDefaultPriceItemsResponse {
  repeated string items = 1;
}

message GetTopSubmitJobUsersRequest {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;

  //需要获取top 多少
  //如果不传，默认取top10的用户
  optional uint32 top_rank = 3;
}

message GetTopSubmitJobUsersResponse {
  message SubmitJobUser {
    string user_id = 1;
    uint32 count = 2;
  }
  repeated SubmitJobUser results = 1;
}

message GetNewJobCountRequest {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  // 以什么时区作为统计的基准，如果不传，默认为UTC
  // 可选时区根据mysql的时区确定，具体可参考：https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html
    optional string time_zone = 3;
}

message GetNewJobCountResponse {
  message DailyJobCount {
    google.type.Date date = 1;
    uint64 count = 2;
  }
  repeated DailyJobCount results = 1;
}

message GetJobTotalCountRequest {

}

message GetJobTotalCountResponse {
  uint64 count = 1;
}

message TimeRange {
  optional google.protobuf.Timestamp start_time = 1;
  optional google.protobuf.Timestamp end_time = 2;
}
message PageInfo {
  uint32 page = 1;
  uint64 page_size = 2;
}

message SortInfo {
  enum SortOrder {
    ASC = 0;
    DESC = 1;
  }

  string field = 1;
  SortOrder order = 2;
}

message AllJobInfo {
  uint32 job_id = 1;
  string name = 2;
  string account = 3;
  string user = 4;
  string partition = 5;
  string qos = 6;
  string state = 7;
  // the number of CPUs requested by job
  int32 cpus_req = 8;
  // memory requested by job
  int64 mem_req_mb = 9;
  // the number of nodes requested by job
  int32 nodes_req = 10;
  int64 time_limit_minutes = 11;
  google.protobuf.Timestamp submit_time = 12;
  string working_directory = 13;
  // name of the file that stdout outputs to, relative to the working directory.
  optional string stdout_path = 14;
  // name of the file that stderr outputs to, relative to the working directory.
  optional string stderr_path = 15;
  optional google.protobuf.Timestamp start_time = 16;
  optional int64 elapsed_seconds = 17;
  // indicates why is the job in this state
  optional string reason = 18;
  optional string node_list = 19;
  // the number of GPUs used by job
  optional int32 gpus_alloc = 20;
  // the number of CPUs used by job
  optional int32 cpus_alloc = 21;
  // memory used by job
  optional int64 mem_alloc_mb = 22;
  // the number of nodes used by job
  optional int32 nodes_alloc = 23;
  optional google.protobuf.Timestamp end_time = 24;

  // ended job from mis db
  optional uint64 bi_job_index = 25;
  optional uint64 time_wait = 26;
  google.protobuf.Timestamp record_time = 27;
  common.Money account_price = 28;
  common.Money tenant_price = 29;
}

message GetAllJobsRequest {
  string cluster_id = 1;
  // filter options. The logical relationship between multiple filtering options is "AND".
  message Filter {
    optional string tenant = 1;
    repeated string users = 2;
    repeated string accounts = 3;
    repeated string states = 4;
    // if set this field, return jobs that submitted between the time range(both endpoints included)
    optional TimeRange submit_time = 5;
    // if set this field, return jobs that ended between the time range(both endpoints included)
    optional TimeRange end_time = 6;
  }
  // specify filter options
  optional Filter filter = 2;

  // 'page' number with a 'pagesize' pagination.
  // if not set, no pagination
  optional PageInfo page_info = 3;

  // returned jobs should be sorted if set
  optional SortInfo sort = 4;
}

message GetAllJobsResponse {
  repeated AllJobInfo jobs = 1;
  // total count of page
  uint32 total_page = 2;
}

message GetJobByIdRequest {
  string cluster_id = 1;
  uint32 job_id = 2;
}

message GetJobByIdResponse {
  AllJobInfo job = 1;
}

service JobService {
  rpc GetJobs(GetJobsRequest) returns (GetJobsResponse);
  rpc GetJobByBiJobIndex(GetJobByBiJobIndexRequest) returns (GetJobByBiJobIndexResponse);
  rpc ChangeJobPrice(ChangeJobPriceRequest) returns (ChangeJobPriceResponse);

  rpc GetRunningJobs(GetRunningJobsRequest) returns (GetRunningJobsResponse);

  rpc ChangeJobTimeLimit(ChangeJobTimeLimitRequest) returns (ChangeJobTimeLimitResponse);
  rpc QueryJobTimeLimit(QueryJobTimeLimitRequest) returns (QueryJobTimeLimitResponse);

  rpc CancelJob(CancelJobRequest) returns (CancelJobResponse);

  rpc GetBillingItems(GetBillingItemsRequest) returns (GetBillingItemsResponse);

  // ALREADY_EXISTS: item_id already exists
  // NOT_FOUND: tenant_name is not found
  // INVALID_ARGUMENT: amount is not valid or path is not valid
  rpc AddBillingItem(AddBillingItemRequest) returns (AddBillingItemResponse);

  rpc GetMissingDefaultPriceItems(GetMissingDefaultPriceItemsRequest) returns (GetMissingDefaultPriceItemsResponse);

  rpc GetTopSubmitJobUsers(GetTopSubmitJobUsersRequest) returns (GetTopSubmitJobUsersResponse);

  rpc GetNewJobCount(GetNewJobCountRequest) returns (GetNewJobCountResponse);

  rpc GetJobTotalCount(GetJobTotalCountRequest) returns (GetJobTotalCountResponse);

  rpc GetAllJobs(GetAllJobsRequest) returns (GetAllJobsResponse);

  rpc GetJobById(GetJobByIdRequest) returns (GetJobByIdResponse);
}
